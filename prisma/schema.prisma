// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  status       UserStatus    @default(ACTIVE)
  image        String?
  role         UserRole      @default(USER)
  subscription Subscription?
  requestsUsed Int           @default(0)
  freeTrial    FreeTrial?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Payment      Payment[]
  Chat         Chat[]
  accounts     Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  user              User    @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid()) 
  sessionToken String   @unique
  userId       String   @unique @map("userId") 
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum UserRole {
  USER
  ADMIN
}

model Chat {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    String // "user" ou "bot"
  content   String
  createdAt DateTime @default(now())
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String             @unique
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan               @default(FREE)
  status    SubscriptionStatus @default(ACTIVE)
  expiresAt DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model FreeTrial {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Plan {
  FREE
  PREMIUM
  BUSINESS
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model Payment {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  currency  String        @default("USD")
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
